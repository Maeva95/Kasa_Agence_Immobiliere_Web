Aller au contenu
Communaut√© DEV
Recherche...

Se connecter
Cr√©er un compte

0
Aller aux commentaires
6
Sauvegarder

Image de couverture pour le d√©ploiement d'une application Vite sur des pages GitHub √† l'aide des actions GitHub : un guide √©tape par √©tape
Dauda Lawal
Dauda Lawal
Post√© sur19 ao√ªt ‚Ä¢ Mis √† jour le2 sept.


5

1

1
D√©ployer une application Vite sur des pages GitHub √† l'aide des actions GitHub : un guide √©tape par √©tape
#
d√©veloppement web
#
r√©agir
#
d√©veloppeur
#
github
Table des mati√®res
Introduction
Conditions pr√©alables
Configuration du projet
Configurer la configuration Vite
D√©ploiement de l'application
Apportez des modifications et poussez :
Flux de travail des actions GitHub :
Acc√®s √† l'application d√©ploy√©e :
Conclusion
Introduction
La cr√©ation de flux de travail efficaces pour le d√©ploiement d'applications Web est cruciale dans le paysage de d√©veloppement actuel, en √©volution rapide. Les pages GitHub et les actions GitHub sont devenues des outils puissants pour automatiser le processus de d√©ploiement. Ce guide vise √† guider les d√©veloppeurs dans le d√©ploiement d'une application Vite.js sur les pages GitHub √† l'aide des actions GitHub.

√Ä la fin de ce didacticiel, vous comprendrez parfaitement comment configurer un pipeline de d√©ploiement automatis√© pour votre application Vite.

Conditions pr√©alables
Avant de nous lancer dans le processus de d√©ploiement, assurons-nous que vous disposez des outils et des connaissances n√©cessaires :

Connaissance de Vite.js : Familiarit√© avec Vite.js, un outil de construction qui am√©liore consid√©rablement l'exp√©rience de d√©veloppement des applications Web modernes.

Compte GitHub : Un compte GitHub est n√©cessaire pour cr√©er des r√©f√©rentiels et configurer les actions GitHub.

Git : Compr√©hension de base de Git pour le contr√¥le de version.

Node.js et npm : assurez-vous que Node.js et npm (Node Package Manager) sont install√©s sur votre ordinateur.

Vite App : Une application Vite.js pr√™te √† √™tre d√©ploy√©e.

Configuration du projet
Pour les besoins de ce guide, supposons que vous disposez d'une application Vite nomm√©e ¬´ MyViteApp ¬ª que vous souhaitez d√©ployer sur les pages GitHub.

Cr√©ez un r√©f√©rentiel GitHub :
acc√©dez √† votre compte GitHub et cr√©ez un nouveau r√©f√©rentiel nomm√© "my-vite-app" (ou tout autre nom de votre choix).
Clonez le r√©f√©rentiel sur votre machine locale √† l'aide de git clone.

Configuration de l'application Vite :
acc√©dez au r√©pertoire de votre projet : cd my-vite-app.
Installer les d√©pendances : ex√©cutez npm installpour installer les packages n√©cessaires.

Cr√©ez un workflow d'action GitHub :
dans votre r√©f√©rentiel, cr√©ez un nouveau r√©pertoire nomm√© .github/workflows. Dans ce r√©pertoire, cr√©ez un fichier YAML nomm√© deploy.yml. C'est ici que vous d√©finirez votre workflow GitHub Actions.
Copiez et collez le code suivant dans votre deploy.ymlfichier :
# Simple workflow for deploying static content to GitHub Pages
name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload dist repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
Configurer la configuration Vite
Ajoutez une propri√©t√© appel√©e base avec la valeur du nom de notre r√©f√©rentiel sur vite.config.jsou vite.config.ts. Par exemple, si le nom de notre r√©f√©rentiel est my-vite-app, alors nous d√©finissons la configuration comme suit :
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  base: '/my-vite-app/'
})

L'URL de d√©ploiement seraithttps://<OUR_GITHUB_USERNAME>.github.io/my-vite-app.

Ce workflow s'ex√©cutera √† chaque pouss√©e vers la branche principale. Il construira d'abord le projet, puis le d√©ploiera sur les pages GitHub.

D√©ploiement de l'application
Une fois le workflow GitHub Actions en place, voici comment fonctionne le processus de d√©ploiement :

Apporter des modifications et pousser :
apportez des modifications √† votre application Vite. Validez et transmettez vos modifications √† la branche principale. Validez le workflow de d√©ploiement et transf√©rez les modifications vers GitHub.
git add .
git commit -m "add deploy workflow"
git push


Workflow des actions GitHub :
les actions GitHub d√©clencheront automatiquement le workflow d√©fini dans deploy.ymll'√©v√©nement push.

Lorsque vous acc√©dez √† Actions et cliquez sur le workflow r√©cent, vous devriez voir qu'il a √©chou√© en raison d'autorisations manquantes :

autorisations

N'oubliez pas d'activer l'autorisation d'√©criture. Pour r√©soudre ce probl√®me, acc√©dez √† Param√®tres d'actions , s√©lectionnez les autorisations de lecture et d'√©criture et appuyez sur Enregistrer :

Autorisations de lecture et d'√©criture
Revenez √† Actions , cliquez sur le flux de travail ayant √©chou√© et, dans le coin sup√©rieur droit, cliquez sur R√©ex√©cuter les t√¢ches ayant √©chou√©.

√©chec du flux de travail

Acc√®s √† l'application d√©ploy√©e : une fois le flux de travail termin√© avec succ√®s, votre application Vite sera d√©ploy√©e sur l'URL des pages GitHub que vous avez sp√©cifi√©es dans le champ de base avec la valeur du nom de notre r√©f√©rentiel sur vite.config.js. Acc√©dez √† votre application d√©ploy√©e sur https://yourusername.github.io/my-vite-app .
Conclusion
Toutes nos f√©licitations! Vous avez configur√© avec succ√®s un pipeline de d√©ploiement automatis√© pour votre application Vite.js √† l'aide des actions GitHub et l'avez d√©ploy√© sur les pages GitHub. Ce flux de travail rationalis√© vous fera gagner du temps et des efforts, vous permettant de vous concentrer sur le d√©veloppement d'applications Web √©tonnantes.

En suivant ce guide, vous avez acquis des informations pr√©cieuses sur la configuration des actions GitHub, la cr√©ation d'un workflow de d√©ploiement et l'utilisation des pages GitHub pour h√©berger vos projets. Ces connaissances vous permettront de rationaliser votre processus de d√©veloppement et de d√©ployer efficacement vos futures applications Web.

Merci de donner votre temps pr√©cieux!

ü•∞ Si vous avez aim√© cet article, pensez √† le partager.

Bon codage !

N'oubliez pas de d√©poser votre commentaire.

Meilleurs commentaires (0)

S'abonner
photo
Ajouter √† la discussion
Code de conduite ‚Ä¢ Signaler un abus
Communaut√© DEV

Tendances dans Webdev
La communaut√© Webdev discute actuellement de l'importance des startups n√©glig√©es et de leurs offres innovantes, de la ma√Ætrise des composants React et de la pr√©paration des entretiens avec les d√©veloppeurs frontend de React. Il existe √©galement un int√©r√™t croissant pour les projets open source pour 2023 et l'apprentissage de l'IA en cr√©ant des r√©seaux de neurones √† l'aide de Vanilla JS.

nathan_tarbert 
‚ö°‚ö° 7 r√©f√©rentiels Open Source qui vous rendront 90 % plus intelligent üòé
Nathan Tarbert „Éª 13 octobre
#webdev #programmation #opensource #productivit√©
GitHub 20k 
‚ú® 8 composants pour devenir un ma√Ætre React üßô‚Äç‚ôÇÔ∏è ü™Ñ
Nevo David pour GitHub 20k „Éª 16 octobre
#r√©agir #webdev #javascript #opensource
m_midas 
44 questions d'entretien avec React Frontend
Yan Levin „Éª 12 octobre
#webdev #javascript #d√©butants #react
madza 
24 projets Open Source pour les d√©veloppeurs en 2023 üî•üëç
Madza „Éª 17 octobre
#opensource #github #programmation #webdev
grahamthedev 
üß† Une IA/r√©seau de neurones...en vanilla JS ! üò± Sans biblioth√®ques ! ü§Ø
GrahamTheDev „Éª 13 octobre
#ai #javascript #d√©butants #webdev
Lire ensuite
image de profil de samanabbasi
üöÄComment fonctionne JavaScript (partie 8) ? Obligatoire
Sam Abaasi-26 octobre

image de profil de Wilsmex
Tutoriel CSS Flexbox
SuivreAndrew -26 octobre

image de profil de lakshmananarumugam
Gestion avanc√©e des URL Next.js avec URLSearchParams
Lakshmanan Arumugam -26 octobre

document√©crit l'image de profil
Million.js : audit de documents en 10 minutes
Document√âcrire -12 octobre


Dauda Lawal
Suivre
D√©veloppeur Web| R√©dacteur technique| Passionn√© de blockchain
EMPLACEMENT
Lagos, Nig√©ria
REJOINT
3 juillet. 2022
Plus de Dauda Lawal
Commandes Git essentielles : Top 5 que chaque d√©veloppeur doit ma√Ætriser
# webdev # programmation # github # d√©butants
Comprendre la diff√©rence entre les types de donn√©es primitifs et non primitifs en JavaScript
# webdev # javascript # d√©butants # programmation
Qu'est-ce que les espaces de codes GitHub ?
# d√©butants # programmation # github # githubhack23
Communaut√© DEV

üåö La vie est trop courte pour naviguer sans mode sombre
Vous pouvez personnaliser votre th√®me, votre police et bien plus encore lorsque vous √™tes connect√© .

# Simple workflow for deploying static content to GitHub Pages
name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload dist repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
